Visual Presentation Bonus Feature Implementation

The visual presentation mode was implemented as a bonus feature for the Tank Battle Game. This feature provides an intuitive visual representation of the game state using emojis, making it easier to understand the game's dynamics and test the implementation.

Implementation details:

1. Command-line Integration:
   - Added "--visual" flag support in main.cpp
   - The flag is parsed and passed to the GameManager constructor
   - Completely optional: the game runs perfectly in text mode without visualization

2. Enhanced Display:
   - Created a specialized display function that uses emojis to represent game elements
   - Implemented in utils.cpp with the displayMap function
   - Used throughout the GameManager displayGame method

3. Visual Elements:
   - Tank 1: ðŸš— 
   - Tank 2: ðŸš™
   - Wall: ðŸŸ©
   - Mine/Shell: ðŸ’¥
   - Empty space: â¬œ

4. Display Logic:
   - The board state is converted to a 2D character grid
   - Game objects (tanks, shells) are overlaid on this grid
   - In visual mode, each turn's state is displayed with a small delay (300ms)
   - The final game state is always displayed regardless of mode

5. Testing Benefits:
   - Allowed real-time observation of game dynamics
   - Made collision detection and resolution issues more obvious
   - Provided intuitive feedback on movement and firing mechanics
   - Helped verify win/loss conditions visually

6. Implementation Challenges:
   - Ensuring proper terminal emoji support across different platforms
   - Managing the display rate to balance between readability and game speed
   - Coordinating the visual representation with the underlying game state

7. How to Check:
   - Run the game with the --visual flag: ./tank_game resources/exampleBoard.txt --visual
   - Or use the provided Makefile target: make run_visual ARGS=resources/exampleBoard.txt
   - The game will display the board state using emojis after each turn

This visual mode significantly enhanced both the user experience and our ability to debug complex game interactions, while keeping the core game logic separate and maintainable.
