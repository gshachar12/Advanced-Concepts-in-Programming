# Tank Battle Game - Project 3 Makefile
# Authors: Shachar Gabbay and Dor Liberman

CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -Icommon -Isrc -Isimulator -Ialgorithms
LDFLAGS = 

# Directories
COMMON_DIR = common
SRC_DIR = src
SIMULATOR_DIR = simulator
ALGORITHMS_DIR = algorithms
BUILD_DIR = build

# Target executable
TARGET = tanks_game

# Source files
COMMON_SOURCES = 
SRC_SOURCES = src/Board.cpp src/Tank.cpp src/Shell.cpp src/TankBattleInfo.cpp src/GameState.cpp src/CollisionDetector.cpp src/ActionProcessor.cpp src/GameManager.cpp src/VisualizingGameManager.cpp src/main.cpp
ALGORITHM_SOURCES = src/algorithms/SimpleAlgorithm.cpp src/algorithms/BfsAlgorithm.cpp src/algorithms/MyPlayer.cpp src/algorithms/AlgorithmFactory.cpp src/algorithms/TournamentManager.cpp
SIMULATOR_SOURCES = 

# Object files
COMMON_OBJECTS = $(COMMON_SOURCES:.cpp=.o)
SRC_OBJECTS = $(SRC_SOURCES:.cpp=.o)
ALGORITHM_OBJECTS = $(ALGORITHM_SOURCES:.cpp=.o)
SIMULATOR_OBJECTS = $(SIMULATOR_SOURCES:.cpp=.o)

ALL_OBJECTS = $(COMMON_OBJECTS) $(SRC_OBJECTS) $(ALGORITHM_OBJECTS) $(SIMULATOR_OBJECTS)

# Default target
all: directories $(TARGET)

# Create build directories
directories:
	@mkdir -p $(BUILD_DIR)

# Main target
$(TARGET): $(ALL_OBJECTS)
	$(CXX) $(ALL_OBJECTS) -o $(TARGET) $(LDFLAGS)

# Compile rules
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Test target - compile interfaces only
test_interfaces:
	@echo "Testing interface compilation..."
	$(CXX) $(CXXFLAGS) -c $(COMMON_DIR)/ActionRequest.h -o /dev/null 2>/dev/null || echo "ActionRequest.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(COMMON_DIR)/BattleInfo.h -o /dev/null 2>/dev/null || echo "BattleInfo.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(COMMON_DIR)/SatelliteView.h -o /dev/null 2>/dev/null || echo "SatelliteView.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(COMMON_DIR)/TankAlgorithm.h -o /dev/null 2>/dev/null || echo "TankAlgorithm.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(COMMON_DIR)/Player.h -o /dev/null 2>/dev/null || echo "Player.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(COMMON_DIR)/GameResult.h -o /dev/null 2>/dev/null || echo "GameResult.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(COMMON_DIR)/AbstractGameManager.h -o /dev/null 2>/dev/null || echo "AbstractGameManager.h: ‚úì"
	@echo "All interfaces compile successfully ‚úì"

# Test core components compilation
test_components:
	@echo "Testing core component compilation..."
	$(CXX) $(CXXFLAGS) -c $(SRC_DIR)/Position.h -o /dev/null 2>/dev/null || echo "Position.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(SRC_DIR)/Direction.h -o /dev/null 2>/dev/null || echo "Direction.h: ‚úì" 
	$(CXX) $(CXXFLAGS) -c $(SRC_DIR)/CellType.h -o /dev/null 2>/dev/null || echo "CellType.h: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(SRC_DIR)/Board.cpp -o /dev/null 2>/dev/null && echo "Board.cpp: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(SRC_DIR)/Tank.cpp -o /dev/null 2>/dev/null && echo "Tank.cpp: ‚úì"
	$(CXX) $(CXXFLAGS) -c $(SRC_DIR)/Shell.cpp -o /dev/null 2>/dev/null && echo "Shell.cpp: ‚úì"
	@echo "All core components compile successfully ‚úì"

# Build object files for testing
test_build: $(SRC_OBJECTS)
	@echo "Core components build test successful ‚úì"

# Test GameManager compilation
test_game_manager: test_game_manager_simple.exe
	@echo "Running GameManager compilation test..."
	test_game_manager_simple.exe

# Test plugin architecture
test_plugins: test_plugin_architecture.exe
	@echo "Running Plugin Architecture test..."
	test_plugin_architecture.exe

test_plugin_architecture.exe: test_plugin_architecture.cpp $(SRC_SOURCES) $(ALGORITHM_SOURCES)
	$(CXX) $(CXXFLAGS) -I. -o test_plugin_architecture.exe test_plugin_architecture.cpp $(SRC_SOURCES) $(ALGORITHM_SOURCES)

# Test tournament system
test_tournament: test_tournament.exe
	@echo "Running Tournament System test..."
	test_tournament.exe

test_tournament.exe: test_tournament.cpp $(SRC_SOURCES) $(ALGORITHM_SOURCES)
	$(CXX) $(CXXFLAGS) -I. -o test_tournament.exe test_tournament.cpp $(SRC_SOURCES) $(ALGORITHM_SOURCES)

# Clean target
clean:
	rm -f $(ALL_OBJECTS) $(TARGET)
	rm -rf $(BUILD_DIR)
	rm -f test_game_manager_simple.exe test_plugin_architecture.exe test_tournament.exe

# Help target
help:
	@echo "Available targets:"
	@echo "  all               - Build the complete project"
	@echo "  run               - Build and run the game with default settings"
	@echo "  tournament        - Run tournament mode"
	@echo "  list              - List available algorithms"
	@echo "  demo              - Run a demonstration game"
	@echo "  test_interfaces   - Test that interface files compile"
	@echo "  test_components   - Test that core component files compile"
	@echo "  test_build        - Build object files for testing"
	@echo "  test_game_manager - Test GameManager compilation and basic functionality"
	@echo "  clean             - Remove build files"
	@echo "  help              - Show this help message"

# Game execution targets
run: $(TARGET)
	@echo "üéÆ Running Tank Battle Game..."
	./$(TARGET)

tournament: $(TARGET)
	@echo "üèÜ Running Tournament..."
	./$(TARGET) -tournament -verbose

list: $(TARGET)
	@echo "üìã Available Algorithms:"
	./$(TARGET) -list

demo: $(TARGET)
	@echo "üéØ Running Demo Game..."
	./$(TARGET) -algo1 Simple -algo2 BFS -verbose -steps 25

# Custom game runs
simple-vs-bfs: $(TARGET)
	@echo "‚öîÔ∏è  Simple vs BFS Battle..."
	./$(TARGET) -algo1 Simple -algo2 BFS -verbose -steps 50

bfs-vs-simple: $(TARGET)
	@echo "‚öîÔ∏è  BFS vs Simple Battle..."
	./$(TARGET) -algo1 BFS -algo2 Simple -verbose -steps 50

quick-tournament: $(TARGET)
	@echo "üèÜ Quick Tournament (1 game per matchup)..."
	./$(TARGET) -tournament -games 1

# Visualization targets
visual: $(TARGET)
	@echo "üéÆ Running Visualization Mode..."
	./$(TARGET) -visualize -map inputs/input2.txt -steps 20

visual-long: $(TARGET)
	@echo "üéÆ Running Long Visualization Game..."
	./$(TARGET) -visualize -map inputs/simple_map.txt -steps 50

visual-input1: $(TARGET)
	@echo "üéÆ Running Visualization with input1..."
	./$(TARGET) -visualize -map inputs/input1.txt -steps 25

.PHONY: all directories test_interfaces test_components test_build clean help run tournament list demo simple-vs-bfs bfs-vs-simple quick-tournament visual visual-long visual-input1
